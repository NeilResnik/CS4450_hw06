Game Name -> channel
    socket.channel("game:<game name>", {user: <user as string>})




SOCKET MESSAGES:
"game:<game name>", {user: <user as string>} -> sent by channel.join(), move channel.join() into ch_join(gameName, user)
                                        -> user types in game name, either creates new game or joins running game
                                        -> if user exists in game, become that user?
                                        -> if game is "playing", no menu for choosing observer or player, automatically an observer
"modifyUser", {player: boolean} -> call to change a user player | observer
    -> "ok" response if all good
    -> "tooManyUsers" response if it would cause more than 4 players
"readyUp", {ready: boolean} -> call to toggle if a player is ready (toggle only visible if user is a player?)
"guess", [guessArr] ->  called when a user guesses
                    -> does not return a state update!
                    -> returns "ok" or "invalidGuess" (either incorrect length/chars or guessed during "waiting" state





Lobby:
    3 States: Ready, Not Ready, Observe - all are sent to server when changed, starts in not ready
Game:
    Guess send format: 
        List of Strings (each string = 1 letter)

    view:

    {
        user: userId
        players:
        {
            id: {
                    'user': string,
                    'ready': bool,
                    'guesses': [{
                        guess: string,
                        bulls: number,
                        cows: number
                    }]
                }
        },
        observers: { id: username }

        gameState: "waiting" || "playing"
        gameName: name
    }


    GAME STATES: "waiting", "playing"
     - server tells the clients if they should display the lobby or the game

    Timer: Seperate instances on each side, client resets timer when state is received
    (use broadcast serverside)





Internal Server state (game.ex):

STORE PLAYERS BY ID


{
    players: {
        id: {
                user: string,
                ready: bool,
                guesses: [{
                    guess: string,
                    bulls: number,
                    cows: number
                }]
            }
    }
    observers: {id: name}
    gameState: "waiting" || "playing"
    answer: ["#", "#", "#", "#"]
    pendingGuesses: {id: { guess: string, bulls: number, cows: number } }
    gameName: name
}
